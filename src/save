#include <Kokkos_Core.hpp>

#include <iostream>

// Forward declaration of Particles class
// class Particles;

//template <class Scheduler>
struct Species {
  // using future_type = Kokkos::BasicFuture<Particles, Scheduler>;
  
  std::size_t npart;

  // future_type sp1;
  // future_type sp2;

  Species(const std::size_t& _npart) : npart { _npart } {}

  // template <class TeamMember>
  // KOKKOS_INLINE_FUNCTION
  // void operator()(TeamMember& member) {
  //       if(sp1.is_null()) {
  //       sp1 = Kokkos::task_spawn(
  //           Kokkos::TaskSingle(member.scheduler()),
  //           MyTaskFunctor());
  //       Kokkos::respawn(this, sp1);
  //       }
  //       else if(sp2.is_null()) {
  //       sp2 = Kokkos::task_spawn(
  //           Kokkos::TaskSingle(member.scheduler()),
  //           MyTaskFunctor());
  //       Kokkos::respawn(this, sp1);
  //       }  
  //       else {
  //       printf("Got result\n");
  //      }
  // }
};

class Particles : public Species<Kokkos::DefaultExecutionSpace> {
public:
  Kokkos::View<double*> x;

  Particles(const std::size_t& _npart) : Species { _npart }, x { "x", _npart } {}
};

auto main(int argc, char* argv[]) -> int {
  Kokkos::initialize(argc, argv);
  {
    // using scheduler_type = Kokkos::TaskScheduler<Kokkos::DefaultExecutionSpace>;
    // using memory_space = typename scheduler_type::memory_space;
    // using memory_pool = typename scheduler_type::memory_pool;
    // std::vector<Particles> species { Particles(10000), Particles(100000)};

    // define number of threads in a block

    //NTHREADS = 1024;

    // find number of blocks to launch
    
    // ****

    // number_of_blocks = ceil(10000/1024) + ceil(100000/1024);

    // split number of particles into starting_index
    // view1d starting_index = [(sp1, i1), (sp1, i2), i3, ..., (sp2, i1))];

    // Kokkos::parallel_for("heirarchical loop", Kokkos::TeamPolicy(number_of_blocks), KOKKOS_LAMBDA(const member_type &team_member){
    //   auto [sp1,my_index] = starting_index[team_member.league_rank()];
    //   Kokkos::parallel_for(Kokkos::ThreadVectorRange(team_member, NTHREADS), KOKKOS_LAMBDA(const int &i){
    //     auto p = my_index + i;
    //     if (species[sp1] == part1)
    //       spec.x(p) += 0.1;
    //     else if (my_spec == part1)
    //       spec.x(p) += 0.01;
    //     end
    //   }
    // };

    // )
    
    // ****

    for (auto& spec : species) {
      Kokkos::parallel_for(
        "loop_species", spec.npart, KOKKOS_LAMBDA(const std::size_t p) { spec.x(p) += 0.1; });
    }

    // Kokkos::parallel_for(Kokkos::MDRangePolicy<DevExecutionSpace, Kokkos::Rank<2, Iterate::Right>>({0, 0}, {species.size(), }))

    // result =
    //     Kokkos::host_spawn(
    //       Kokkos::TaskSingle(scheduler),
    //       Species<scheduler_type>{n}
    //     );

  }
  Kokkos::finalize();
  return 0;
}
